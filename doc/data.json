{
    "project": {
        "name": "dataexp",
        "description": "An application for exploring and visualizing the timeseries",
        "version": "0.0.1",
        "url": "http://www.maya-technologies.com/en/",
        "themedir": "/usr/local/lib/node_modules/yuidocjs/themes/maya"
    },
    "files": {
        "app/js/controllers/DeleteZoneCtrl.js": {
            "name": "app/js/controllers/DeleteZoneCtrl.js",
            "modules": {
                "Controllers": 1
            },
            "classes": {
                "DeleteZoneCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/DialogCtrl.js": {
            "name": "app/js/controllers/DialogCtrl.js",
            "modules": {},
            "classes": {
                "DialogCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/FabCtrl.js": {
            "name": "app/js/controllers/FabCtrl.js",
            "modules": {},
            "classes": {
                "FabCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/HideBtnCtrl.js": {
            "name": "app/js/controllers/HideBtnCtrl.js",
            "modules": {},
            "classes": {
                "HideBtnCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/LeftNavCtrl.js": {
            "name": "app/js/controllers/LeftNavCtrl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/MovableChartsCtrl.js": {
            "name": "app/js/controllers/MovableChartsCtrl.js",
            "modules": {},
            "classes": {
                "MovableChartsCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/ToolBarCtrl.js": {
            "name": "app/js/controllers/ToolBarCtrl.js",
            "modules": {},
            "classes": {
                "ToolBarCtrl": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "app/js/canvasjs.js": {
            "name": "app/js/canvasjs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/js/main.js": {
            "name": "app/js/main.js",
            "modules": {
                "client": 1
            },
            "classes": {
                "main": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/connectors/FileConnector.js": {
            "name": "server/connectors/FileConnector.js",
            "modules": {
                "Connectors": 1
            },
            "classes": {
                "FileConnector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/connectors/MongoConnector.js": {
            "name": "server/connectors/MongoConnector.js",
            "modules": {},
            "classes": {
                "MongoConnector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/connectors/MysqlConnector.js": {
            "name": "server/connectors/MysqlConnector.js",
            "modules": {},
            "classes": {
                "MysqlConnector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/DeleteSource.js": {
            "name": "server/rest/DeleteSource.js",
            "modules": {
                "RestApi": 1
            },
            "classes": {
                "DeleteSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/GetFields.js": {
            "name": "server/rest/GetFields.js",
            "modules": {},
            "classes": {
                "GetFields": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/GetSources.js": {
            "name": "server/rest/GetSources.js",
            "modules": {},
            "classes": {
                "GetSources": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/GetStores.js": {
            "name": "server/rest/GetStores.js",
            "modules": {},
            "classes": {
                "GetStores": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/GetTimeseries.js": {
            "name": "server/rest/GetTimeseries.js",
            "modules": {},
            "classes": {
                "GetTimseries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/PutSource.js": {
            "name": "server/rest/PutSource.js",
            "modules": {},
            "classes": {
                "PutSource": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/routes.js": {
            "name": "server/routes.js",
            "modules": {},
            "classes": {
                "routes": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "client": {
            "name": "client",
            "submodules": {
                "Controllers": 1
            },
            "elements": {},
            "classes": {
                "DeleteZoneCtrl": 1,
                "DialogCtrl": 1,
                "FabCtrl": 1,
                "HideBtnCtrl": 1,
                "MovableChartsCtrl": 1,
                "ToolBarCtrl": 1,
                "main": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "app/js/main.js",
            "line": 5
        },
        "Controllers": {
            "name": "Controllers",
            "submodules": {},
            "elements": {},
            "classes": {
                "DeleteZoneCtrl": 1,
                "DialogCtrl": 1,
                "FabCtrl": 1,
                "HideBtnCtrl": 1,
                "MovableChartsCtrl": 1,
                "ToolBarCtrl": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "client",
            "namespace": "",
            "file": "app/js/controllers/ToolBarCtrl.js",
            "line": 7,
            "description": "Angualr.js controllers."
        },
        "server": {
            "name": "server",
            "submodules": {
                "Connectors": 1,
                "RestApi": 1
            },
            "elements": {},
            "classes": {
                "FileConnector": 1,
                "MongoConnector": 1,
                "MysqlConnector": 1,
                "DeleteSource": 1,
                "GetFields": 1,
                "GetSources": 1,
                "GetStores": 1,
                "GetTimseries": 1,
                "PutSource": 1,
                "routes": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "server/routes.js",
            "line": 17
        },
        "Connectors": {
            "name": "Connectors",
            "submodules": {},
            "elements": {},
            "classes": {
                "FileConnector": 1,
                "MongoConnector": 1,
                "MysqlConnector": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "server",
            "namespace": "",
            "file": "server/connectors/MysqlConnector.js",
            "line": 9,
            "description": "Connectors to different types of storages."
        },
        "RestApi": {
            "name": "RestApi",
            "submodules": {},
            "elements": {},
            "classes": {
                "DeleteSource": 1,
                "GetFields": 1,
                "GetSources": 1,
                "GetStores": 1,
                "GetTimseries": 1,
                "PutSource": 1,
                "routes": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "server",
            "namespace": "",
            "file": "server/routes.js",
            "line": 17,
            "description": "Rest API's offered by server."
        }
    },
    "classes": {
        "DeleteZoneCtrl": {
            "name": "DeleteZoneCtrl",
            "shortname": "DeleteZoneCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "submodule": "Controllers",
            "namespace": "",
            "file": "app/js/controllers/DeleteZoneCtrl.js",
            "line": 7,
            "description": "A controller that serves the delete zone\n(where all the Drag&Drop objects can be dropped)\nin the footer of  <code>index.html</code> view."
        },
        "DialogCtrl": {
            "name": "DialogCtrl",
            "shortname": "DialogCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "submodule": "Controllers",
            "namespace": "",
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 7,
            "description": "A controller that serves the two templates\nfor dialog windows: <code>AddSource.html</code>\nand <code>SaveFormat.html</code>.\n<br/>\nIt uses two custom angular services:\n- <b>SourcesService</b>: deals with getting/sendig/adding/deleting sources in the backend\n- <b>CSV2JSONService</b>: used for csv type sources"
        },
        "FabCtrl": {
            "name": "FabCtrl",
            "shortname": "FabCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "submodule": "Controllers",
            "namespace": "",
            "file": "app/js/controllers/FabCtrl.js",
            "line": 7,
            "description": "A controller that serves a fab button\nin the <code>index.html</code> view\nthat is used to add a new source."
        },
        "HideBtnCtrl": {
            "name": "HideBtnCtrl",
            "shortname": "HideBtnCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "submodule": "Controllers",
            "namespace": "",
            "file": "app/js/controllers/HideBtnCtrl.js",
            "line": 7,
            "description": "A controller that serves a button\nthat hides a footer\nin the <code>index.html</code> view."
        },
        "MovableChartsCtrl": {
            "name": "MovableChartsCtrl",
            "shortname": "MovableChartsCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "submodule": "Controllers",
            "namespace": "",
            "file": "app/js/controllers/MovableChartsCtrl.js",
            "line": 7,
            "description": "A controller that serves all the \nmovable charts in the footer of <code>index.html</code> view.\n<br/>\nThere are 5 chart types:\n- Pie Chart\n- Timeline\n- Scatter Plot\n- Row Chart\n- Bar Chart"
        },
        "ToolBarCtrl": {
            "name": "ToolBarCtrl",
            "shortname": "ToolBarCtrl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "submodule": "Controllers",
            "namespace": "",
            "file": "app/js/controllers/ToolBarCtrl.js",
            "line": 7,
            "description": "A controller that serves the toolbar\nin the <code>index.html</code> view."
        },
        "main": {
            "name": "main",
            "shortname": "main",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "client",
            "namespace": "",
            "file": "app/js/main.js",
            "line": 5,
            "description": "A main angular module.\n<br/>\nThe dependencies are:\n- <b>ngMaterial</b>: UI components framework <a href=\"https://material.angularjs.org/latest/\">Angular-Material</a>\n- <b>ngDraggable</b>: a Drag&Drop <a href=\"https://github.com/fatlinesofcode/ngDraggable\">module</a>\n- <b>ngResource</b>: lets to use a <a href=\"https://docs.angularjs.org/api/ngResource\">$resource</a> factory with RESTful communication with the back-end\n- <b>ngMessages</b>: angular <a href=\"https://docs.angularjs.org/api/ngMessages/directive/ngMessages\">directory</a> that lets to show and hide messages"
        },
        "FileConnector": {
            "name": "FileConnector",
            "shortname": "FileConnector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "Connectors",
            "namespace": "",
            "file": "server/connectors/FileConnector.js",
            "line": 11,
            "description": "A connector to the files (JSON and CSV)"
        },
        "MongoConnector": {
            "name": "MongoConnector",
            "shortname": "MongoConnector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "Connectors",
            "namespace": "",
            "file": "server/connectors/MongoConnector.js",
            "line": 9,
            "description": "A connector to the MongoDB database"
        },
        "MysqlConnector": {
            "name": "MysqlConnector",
            "shortname": "MysqlConnector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "Connectors",
            "namespace": "",
            "file": "server/connectors/MysqlConnector.js",
            "line": 9,
            "description": "A connector to the MySQL database"
        },
        "DeleteSource": {
            "name": "DeleteSource",
            "shortname": "DeleteSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/DeleteSource.js",
            "line": 9
        },
        "GetFields": {
            "name": "GetFields",
            "shortname": "GetFields",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/GetFields.js",
            "line": 20
        },
        "GetSources": {
            "name": "GetSources",
            "shortname": "GetSources",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/GetSources.js",
            "line": 9
        },
        "GetStores": {
            "name": "GetStores",
            "shortname": "GetStores",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/GetStores.js",
            "line": 20
        },
        "GetTimseries": {
            "name": "GetTimseries",
            "shortname": "GetTimseries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/GetTimeseries.js",
            "line": 32
        },
        "PutSource": {
            "name": "PutSource",
            "shortname": "PutSource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/PutSource.js",
            "line": 10
        },
        "routes": {
            "name": "routes",
            "shortname": "routes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/routes.js",
            "line": 17,
            "description": "A class (module) that defines all \nthe API URLs, and the related methods.\n<br/>\nHere are some of the URLs: <br/>\n- <b>/api/sources</b>: GET a JSON with sources configuration\n- <b>/api/sources</b>: POST a new source, returns an empty array\n- <b>/api/sources/:source_name</b>: DELETE source, returns an empty array\n- <b>/api/stores</b>: POST a sources config, returns an array of stores\n- <b>/api/fields</b>: POST a stores config, returns an array of fields\n- <b>/api/timeseries</b>: POST a fields config, returns the realted dataset\n- <b>/api/stats</b>: GET statistics from tsproc\n- <b>/api/config</b>: GET configuration JSON of tsproc"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app/js/controllers/DeleteZoneCtrl.js",
            "line": 16,
            "description": "A <b>local scope</b> method tha removes \na dropped object from the list of objects\nof its type.\n<br/>\nDropped objects could be:\n- normal fields\n- timestamp fields\n- DC.js or Canvas.js charts\n- movable charts",
            "itemtype": "method",
            "name": "onDropRemove",
            "params": [
                {
                    "name": "data",
                    "description": "A dropped object"
                }
            ],
            "class": "DeleteZoneCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DeleteZoneCtrl.js",
            "line": 103,
            "description": "A <b>local scope</b> method that fires \nwhen the delete zone (placed in the footer of <code>index.html</code>)\nis clicked.\n<br/>\nIt clears all the Drag&Drop objects from\ntheir respective lists.\nIt also deletes a loaded dataset.",
            "itemtype": "method",
            "name": "clearAll",
            "class": "DeleteZoneCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 20,
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 57,
            "description": "A <b>local scope</b> method\nthat returns the title of a toolbar.\n<br/>\nIts value depends on wheather or not \nthe <code>AddSource.html</code> dialog was called to add or modify a source.",
            "itemtype": "method",
            "name": "getToobarTitle",
            "return": {
                "description": "A toolbar title",
                "type": "String"
            },
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 74,
            "description": "A <b>local scope</b> method\nthat returns the label of the OK button\nin the  dialog.\n<br/>\nIts value depends on wheather or not \nthe <code>AddSource.html</code> dialog was called to add or modify a source.",
            "itemtype": "method",
            "name": "getButtonLabel",
            "return": {
                "description": "A button label",
                "type": "String"
            },
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 92,
            "description": "A <b>local scope</b> method, attached to \nthe OK button in the <code>AddSource.html</code> dialog, that\nuses services <b>SourcesService</b> and\n<b>CSV2JSONService</b> to add or modify a source in the back-end.",
            "itemtype": "method",
            "name": "connect",
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 191,
            "description": "A <b>local scope</b> method, attached \nto the delete button in the toolbar of the \n<code>AddSource.html</code> dialog, that uses \na service <b>SourcesService</b> to delete a source from the\nback-end.",
            "itemtype": "method",
            "name": "deleteSource",
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 231,
            "description": "A <b>local scope</b> method that serves <code>AddSource.html</code> \nand reads the choosen file on front-end \nand saves it on the back-end.\n<br/>\nCalled when the added source is of the \n'file' type (JSON or CSV).",
            "itemtype": "method",
            "name": "saveSourceFile",
            "params": [
                {
                    "name": "element",
                    "description": "Used to get the choosen file on the front-end"
                }
            ],
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 290,
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 291,
            "description": "A <b>local scope</b> method that serves\n<code>SaveFormat.html</code> dialog and saves\nthe the timestamp format specified by user.\n<br/>\nIt is done by calling the method <code>hide()</code>\nof <b>$mdDialog</b> service and passing it the format.\nThis way the format can be grabbed in the <code>.then()</code>\nmethod in the controller <b>LoaderCtrl</b>.",
            "itemtype": "method",
            "name": "saveFormat",
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 308,
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 309,
            "description": "A <b>local scope</b> method that serves \nthe <code>AddSource.html</code> and <code>SaveFormat.html</code>\ndialogs and is used to close the dialog.\n<br/>\nDone by calling the <code>cancel()</code> method\nof <b>$mdDialog</b> service.",
            "itemtype": "method",
            "name": "cancel",
            "class": "DialogCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/FabCtrl.js",
            "line": 16,
            "description": "A <b>local scope</b> method that renders a view\n(from <code>AddSource.html</code> template) with\ninputs to add a new source.",
            "itemtype": "method",
            "name": "showDialog",
            "params": [
                {
                    "name": "ev",
                    "description": "event"
                }
            ],
            "class": "FabCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/HideBtnCtrl.js",
            "line": 19,
            "description": "A <b>local scope</b> method that hides/shows\nthe footer at the <code>index.htlm</code> view.",
            "itemtype": "method",
            "name": "toggle",
            "class": "HideBtnCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/HideBtnCtrl.js",
            "line": 30,
            "description": "A <b>root scope</b> $watch method that swithces\nthe image on the hide button depending on its state.",
            "itemtype": "method",
            "name": "switchImage",
            "class": "HideBtnCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/LeftNavCtrl.js",
            "line": 69,
            "class": "MovableChartsCtrl",
            "module": "client"
        },
        {
            "file": "app/js/controllers/LeftNavCtrl.js",
            "line": 187,
            "class": "MovableChartsCtrl",
            "module": "client"
        },
        {
            "file": "app/js/controllers/MovableChartsCtrl.js",
            "line": 22,
            "description": "A <b>local scope</b> method that is fired\nwhen the field is dropped into one of the movable\ncharts in the footer of <code>index.html</code>.\n<br/>\nIt adds the fields into the <code>$rootScope.chartFields</code> list.",
            "itemtype": "method",
            "name": "onDropComplete",
            "params": [
                {
                    "name": "data",
                    "description": "Dropped field"
                },
                {
                    "name": "type",
                    "description": "Chart type"
                }
            ],
            "class": "MovableChartsCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/ToolBarCtrl.js",
            "line": 15,
            "description": "A <b>root scope</b> method that hides/shows\nall the panels (and also footer) in the\n<code>index.html</code>.",
            "itemtype": "method",
            "name": "togglePanels",
            "class": "ToolBarCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/ToolBarCtrl.js",
            "line": 31,
            "description": "A <b>root scope</b> method that hides/shows\na progress bar. Also activates/desactivates\nall the inputs in the <code>index.html</code>.",
            "itemtype": "method",
            "name": "showPB",
            "params": [
                {
                    "name": "activate",
                    "description": "Wheather to activate or not the progress\nbar and inputs",
                    "type": "Boolean"
                }
            ],
            "class": "ToolBarCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/controllers/ToolBarCtrl.js",
            "line": 52,
            "description": "A <b>local scope</b> method that shows\nan about dialog.\n<br/>\nDialog view is specified in hte <code>About.html</code> template.",
            "itemtype": "method",
            "name": "showAbout",
            "params": [
                {
                    "name": "ev",
                    "description": "Event"
                }
            ],
            "class": "ToolBarCtrl",
            "module": "client",
            "submodule": "Controllers"
        },
        {
            "file": "app/js/canvasjs.js",
            "line": 1,
            "preserve": "CanvasJS HTML5 & JavaScript Charts - v1.8.1 GA - http://canvasjs.com/ \nCopyright 2013 fenopix",
            "class": "main",
            "module": "client"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 17,
            "description": "A public method that returns the \nname of the store (single one because it's\na file) that are present in the specified by\nconfig file database.",
            "itemtype": "method",
            "name": "getStoreNames",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (file) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (file) configuration",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var source_config = { \n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t} \n    };\n\n    //requesting the stores\n    file_connnector.getStoreNames(source_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[ \n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'test'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test',\n    \t\t//\t\t\ttype: 'json',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'file',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test.json'\n    \t\t//\t\t}\n    \t\t//\t}\n    \t\t//]\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 88,
            "description": "A public method that adds a field 'size'\nto the store (file) configuration\nspecified in <code>store_config</code>.",
            "itemtype": "method",
            "name": "getStoreSize",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (file) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (file) configuration with\nadditional 'size' field",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'test'},\n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t} \n    };\n\n    //requesting the size\n    file_connnector.getStoreSize(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//{ \n    \t\t//\tstore: {name: 'test', size: 4},\n    \t\t//\tsource: { \n    \t\t//\t\tname: 'test',\n    \t\t//\t\ttype: 'json',\n    \t\t//\t\tuser: '',\n    \t\t//\t\tpassw: '',\n    \t\t//\t\tserver: 'file',\n    \t\t//\t\tport: null,\n    \t\t//\t\tdb: 'test.json'\n    \t\t//\t}\n    \t\t//}\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 171,
            "description": "A public method that returns\nthe field names present in each\ndocument.<br/>\nFields are only checked in the \nfirst document of store (file).<br/>\nAlso the value of each field is saved (cf exemple).<br/>",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (file) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of fields configuration",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'test', size: 4}, //presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t} \n    };\n\n    //requesting the fields\n    file_connnector.getFields(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ \n    \t\t//\t\tfield: {name: 'a', value: 18.11},\n    \t\t//\t\tstore: {name: 'test', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test',\n    \t\t//\t\t\ttype: 'json',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'file',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test.json'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{\n    \t\t//\t\tfield: {name: 'year', value: '2011'},\n    \t\t//\t\tstore: {name: 'test', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test',\n    \t\t//\t\t\ttype: 'json',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'file',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test.json'\n    \t\t//\t\t}\n    \t\t//\t}\n         //]\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 290,
            "description": "A public method that takes in the fields configuration file\n(<code>dataset_config</code>) and returns the requested dataset.",
            "itemtype": "method",
            "name": "getDataset",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A requested dataset",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var dataset_config = {\n    \tfields: [\n    \t\t{name: 'year', value: '2011', format: 'YYYY'}, //'value' and 'format' fields are optional\n    \t\t{name: 'a', value: 18.11}\n    \t],\n    \tstore: {name: 'test', size: 4}, //presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t}\n    };\n\n    //requesting the dataset\n    file_connnector.getDataset(dataset_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ a: 18.11, year: '2011' },\n    \t\t//\t{ a: 21.07, year: '2012' },\n    \t\t//\t{ a: 23.23, year: '2013' },\n    \t\t//\t{ a: 24.24, year: '2014' }\n    \t\t//]\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 383,
            "description": "A private method that checks\nthe validity of source (file)\nconfiguration",
            "itemtype": "method",
            "name": "isValidSourceConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (file) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 406,
            "description": "A private method that checks\nthe validity of store (file)\nconfiguration",
            "itemtype": "method",
            "name": "isValidStoreConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (file) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 429,
            "description": "A private method that checks\nthe validity of store dataset\nconfiguration",
            "itemtype": "method",
            "name": "isValidDatasetConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 15,
            "description": "A public method that returns the \nnames of the stores (mongo collections)\nthat are present in the specified by\nconfig file database.",
            "itemtype": "method",
            "name": "getStoreNames",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mongo database) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mongo collections) configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var source_config = { \n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the stores\n    mongo_connnector.getStoreNames(source_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[ \n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'collection1'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'collection2'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n    \t\t//]\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 143,
            "description": "A public method that adds a field 'size'\nto the store (mongo collection) configuration\nspecified in <code>store_config</code>.",
            "itemtype": "method",
            "name": "getStoreSize",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mongo collection) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mongo collections) configuration with\nadditional 'size' field",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'collection1'},\n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the size\n    mongo_connnector.getStoreSize(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//{ \n    \t\t//\tstore: {name: 'collection1', size: 4},\n    \t\t//\tsource: { \n    \t\t//\t\tname: 'test_mongo',\n    \t\t//\t\ttype: 'mongo',\n    \t\t//\t\tuser: '',\n    \t\t//\t\tpassw: '',\n    \t\t//\t\tserver: 'localhost',\n    \t\t//\t\tport: null,\n    \t\t//\t\tdb: 'test_database'\n    \t\t//\t}\n    \t\t//}\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 227,
            "description": "A public method that returns\nthe field names present in each\ndocument.<br/>\nFields are only checked in the \nfirst document of store (mongo collection).<br/>\nAlso the value of each field is saved (cf exemple).<br/>\nThe mongodb '_id' field is ommited.",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mongo collection) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of fields configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'collection1', size: 4}, //presence of 'size' is optional \n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the fields\n    mongo_connnector.getFields(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ \n    \t\t//\t\tfield: {name: 'a', value: 18.11},\n    \t\t//\t\tstore: {name: 'collection1', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{\n    \t\t//\t\tfield: {name: 'year', value: '2011'},\n    \t\t//\t\tstore: {name: 'collection2', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n         //]\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 369,
            "description": "A public method that takes in the fields configuration file\n(<code>dataset_config</code>) and returns the requested dataset.",
            "itemtype": "method",
            "name": "getDataset",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A requested dataset",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var dataset_config = {\n    \tfields: [\n    \t\t{name: 'year', value: '2011', format: 'YYYY'}, //'value' and 'format' fields are optional\n    \t\t{name: 'a', value: 18.11}\n    \t],\n    \tstore: {name: 'collection1', size: 3},\t//presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the dataset\n    mongo_connnector.getDataset(dataset_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ a: 18.11, year: '2011' },\n    \t\t//\t{ a: 21.07, year: '2012' },\n    \t\t//\t{ a: 23.23, year: '2013' },\n    \t\t//\t{ a: 24.24, year: '2014' }\n    \t\t//]\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 463,
            "description": "A private method that checks\nthe validity of source (mongo database)\nconfiguration",
            "itemtype": "method",
            "name": "isValidSourceConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mongo database) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 486,
            "description": "A private method that checks\nthe validity of store (mongo collection)\nconfiguration",
            "itemtype": "method",
            "name": "isValidStoreConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mongo collection) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 509,
            "description": "A private method that checks\nthe validity of store dataset\nconfiguration",
            "itemtype": "method",
            "name": "isValidDatasetConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 15,
            "description": "A public method that returns the \nnames of the stores (mysql tables)\nthat are present in the specified by\nconfig file database.",
            "itemtype": "method",
            "name": "getStoreNames",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mysql database) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mysql tables) configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var source_config = { \n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the stores\n    mysql_connnector.getStoreNames(source_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[ \n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'table1'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'table2'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n    \t\t//]\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 155,
            "description": "A public method that adds a field 'size'\nto the store (mysql table) configuration\nspecified in <code>store_config</code>.",
            "itemtype": "method",
            "name": "getStoreSize",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mysql table) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mysql tables) configuration with\nadditional 'size' field",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'table1'},\n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the size\n    mysql_connnector.getStoreSize(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//{ \n    \t\t//\tstore: {name: 'table1', size: 4},\n    \t\t//\tsource: { \n    \t\t//\t\tname: 'test_mysql',\n    \t\t//\t\ttype: 'mysql',\n    \t\t//\t\tuser: 'root',\n    \t\t//\t\tpassw: 'root',\n    \t\t//\t\tserver: 'localhost',\n    \t\t//\t\tport: null,\n    \t\t//\t\tdb: 'test_database'\n    \t\t//\t}\n    \t\t//}\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 260,
            "description": "A public method that returns\nthe column names of the table.<br/>\nAlso the first value of each column is saved (cf exemple).<br/>",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mysql table) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of fields configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'table1', size: 4}, //presence of 'size' is optional \n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the fields\n    mysql_connnector.getFields(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ \n    \t\t//\t\tfield: {name: 'a', value: 18.11},\n    \t\t//\t\tstore: {name: 'table1', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{\n    \t\t//\t\tfield: {name: 'year', value: '2011'},\n    \t\t//\t\tstore: {name: 'table1', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n         //]\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 406,
            "description": "A public method that takes in the fields configuration file\n(<code>dataset_config</code>) and returns the requested dataset.",
            "itemtype": "method",
            "name": "getDataset",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A requested dataset",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var dataset_config = {\n    \tfields: [\n    \t\t{name: 'year', value: '2011', format: 'YYYY'}, //'value' and 'format' fields are optional\n    \t\t{name: 'a', value: 18.11}\n    \t]\n    \tstore: {name: 'table1', size: 4},\t//presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the dataset\n    mysql_connnector.getDataset(dataset_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ a: 18.11, year: '2011' },\n    \t\t//\t{ a: 21.07, year: '2012' },\n    \t\t//\t{ a: 23.23, year: '2013' },\n    \t\t//\t{ a: 24.24, year: '2014' }\n    \t\t//]\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 529,
            "description": "A private method that checks\nthe validity of source (mysql database)\nconfiguration",
            "itemtype": "method",
            "name": "isValidSourceConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mysql database) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 552,
            "description": "A private method that checks\nthe validity of store (mysql table)\nconfiguration",
            "itemtype": "method",
            "name": "isValidStoreConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mysql table) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 575,
            "description": "A private method that checks\nthe validity of store dataset\nconfiguration",
            "itemtype": "method",
            "name": "isValidDatasetConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/rest/DeleteSource.js",
            "line": 16,
            "description": "A method that removes a source configuration\nfrom the <code>./server/config/sources.json</code>\nfile. The source to delete is specified\nby it's name in the <code>req</code> object.\n<br/>\nIf the source to delete is a file (JSON or CSV),\nthen it would be deleted from the directory \n<code>./server/datasets/</code>.\n<br/>\nAn empty array is returned by the <code>res</code> object.",
            "itemtype": "method",
            "name": "deleteSource",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "DeleteSource",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetFields.js",
            "line": 24,
            "description": "A method that returns (via the object <code>res</code>) the fields\nconfiguration of the requested (via the object <code>req</code>) stores.",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetFields",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetSources.js",
            "line": 16,
            "description": "A method that returns (via the object <code>res</code>) a JSON file\nwith configuration of sources (ex: MySQL database).\n<br/>\nThe configuration on the server is stored in the file\n<code>./server/config/sources.json</code>.",
            "itemtype": "method",
            "name": "getSources",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetSources",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetStores.js",
            "line": 24,
            "description": "A method that returns (via the object <code>res</code>) the stores\nconfiguration of the requested (via the object <code>req</code>) sources.",
            "itemtype": "method",
            "name": "getStores",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetStores",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetTimeseries.js",
            "line": 37,
            "description": "A method that returns (via the object <code>res</code>) the full\ntimeseries with all requested (via the object <code>req</code>) fields.\nThe tsproc configuration is also passed by <code>req</code> object.\n<br/>\nThe method passes all the timeseries through the tsproc module.",
            "itemtype": "method",
            "name": "getTimeseries",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetTimseries",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetTimeseries.js",
            "line": 181,
            "description": "A method that returns (via the object <code>res</code>) the stats\nthat were pulled from tsproc module during the call of the getTimeseries() method.",
            "itemtype": "method",
            "name": "getStats",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetTimseries",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetTimeseries.js",
            "line": 193,
            "description": "A method that returns (via the object <code>res</code>) the configuration file\nthat were pulled from tsproc module during the call of the getTimeseries() method.\n<br/>\nThe config is pulled from tsproc before it starts to process data, which can modify the config.\nthe getConfig() method to return",
            "itemtype": "method",
            "name": "getConfig",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetTimseries",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/GetTimeseries.js",
            "line": 208,
            "description": "A method that receives an array of size 3 (from front-end) that contains:\n- 0: tsproc module options\n- 1: array of timestamp fields configuration\n- 2: array of other fields configuration\n<br/>\nThen it pulls from it the two arays, and returns\na single configuration which has all the fields\nregrouped by store (cf example)\n<br/>\nThe method is used to prepare a configuration file for the tsproc.",
            "itemtype": "method",
            "name": "regroupFields",
            "params": [
                {
                    "name": "configs",
                    "description": "An array of configurations for tsproc module",
                    "type": "Json array"
                }
            ],
            "example": [
                "\n    //config in\n    var old_config = \n    [\n         //tspoc config\n         {\n           \"transform\": {\n                \"type\": \"interp\",\n                \"interp_type\": \"linear\"\n            },\n            \"reduction\": {\n                \"type\": \"skip\",\n                \"size\": 1,\n                \"target_field\": \"\"\n            },\n            \"date_borders\": {\n                \"from\": {\n                   \"date\": \"\"\n                },\n                \"to\": {\n                    \"date\": \"\"\n                }\n            },\n            \"correlation\": null,\n            \"tsfield_quantum\": \"none\"\n        },\n\n        //timestamp fields\n        [\n            {\n                \"field\": {\n                    \"name\": \"year\",\n                    \"value\": 1911,\n                    \"format\": \"YYYY\",\n                    \"quantum\": \"none\"\n                },\n                \"store\": {\n                    \"name\": \"colorado_river\",\n                    \"size\": 61,\n                },\n                \"source\": {\n                    \"name\": \"rivers\",\n                    \"type\": \"mongo\",\n                    \"user\": \"\",\n                    \"passw\": \"\",\n                    \"server\": \"localhost\",\n                    \"port\": null,\n                    \"db\": \"river_flows\"\n                }\n            },\n            {\n                \"field\": {\n                    \"name\": \"year\",\n                    \"value\": 1919,\n                    \"format\": \"YYYY\",\n                    \"quantum\": \"none\"\n                },\n                \"store\": {\n                    \"name\": \"funder_river\",\n                    \"size\": 37,\n                },\n                \"source\": {\n                    \"name\": \"rivers\",\n                    \"type\": \"mongo\",\n                    \"user\": \"\",\n                    \"passw\": \"\",\n                    \"server\": \"localhost\",\n                    \"port\": null,\n                    \"db\": \"river_flows\"\n                }\n            }\n        ],\n\n        //other fields\n        [\n           {\n                \"field\": {\n                    \"name\": \"flows_colorado\",\n                    \"value\": 18.11,\n                    \"quantum\": 0\n                },\n                \"store\": {\n                    \"name\": \"colorado_river\",\n                    \"size\": 61,\n                },\n                \"source\": {\n                    \"name\": \"rivers\",\n                    \"type\": \"mongo\",\n                    \"user\": \"\",\n                    \"passw\": \"\",\n                    \"server\": \"localhost\",\n                    \"port\": null,\n                    \"db\": \"river_flows\"\n                }\n            },\n            {\n                \"field\": {\n                    \"name\": \"flows_funder\",\n                    \"value\": 26.42,\n                    \"quantum\": 0\n                },\n                \"store\": {\n                    \"name\": \"funder_river\",\n                    \"size\": 37,\n                },\n                \"source\": {\n                    \"name\": \"rivers\",\n                    \"type\": \"mongo\",\n                    \"user\": \"\",\n                    \"passw\": \"\",\n                    \"server\": \"localhost\",\n                    \"port\": null,\n                    \"db\": \"river_flows\"\n                }\n            }\n        ]\n    ];\n\n    //config out\n    var new_config = regroupFields.call(this, old_config);\n    console.log(JSON.stringify(new_config, null, 4));\n    //the result is:\n    // [\n    //    {\n    //        \"fields\": [\n    //            {\n    //                \"name\": \"year\",\n    //                \"value\": 1911,\n    //                \"format\": \"YYYY\",\n    //                \"quantum\": \"none\"\n    //            },\n    //            {\n    //                \"name\": \"flows_colorado\",\n    //                \"value\": 18.11,\n    //                \"quantum\": 0\n    //            }\n    //        ],\n    //        \"store\": {\n    //            \"name\": \"colorado_river\",\n    //            \"size\": 61\n    //        },\n    //        \"source\": {\n    //            \"name\": \"rivers\",\n    //            \"type\": \"mongo\",\n    //            \"user\": \"\",\n    //            \"passw\": \"\",\n    //            \"server\": \"localhost\",\n    //            \"port\": null,\n    //            \"db\": \"river_flows\"\n    //        }\n    //    },\n    //    {\n    //        \"fields\": [\n    //            {\n    //                \"name\": \"year\",\n    //                \"value\": 1919,\n    //                \"format\": \"YYYY\",\n    //                \"quantum\": \"none\"\n    //            },\n    //            {\n    //                \"name\": \"flows_funder\",\n    //                \"value\": 26.42,\n    //                \"status\": \"loaded\",\n    //                \"quantum\": 0\n    //            }\n    //        ],\n    //        \"store\": {\n    //            \"name\": \"funder_river\",\n    //            \"size\": 37\n    //        },\n    //        \"source\": {\n    //            \"name\": \"rivers\",\n    //            \"type\": \"mongo\",\n    //            \"user\": \"\",\n    //            \"passw\": \"\",\n    //            \"server\": \"localhost\",\n    //            \"port\": null,\n    //            \"db\": \"river_flows\"\n    //        }\n    //    }\n    //]\n    //all the fields are regrouped by store"
            ],
            "class": "GetTimseries",
            "module": "server",
            "submodule": "RestApi"
        },
        {
            "file": "server/rest/PutSource.js",
            "line": 17,
            "description": "A method that adds a new source configuration\nto the <code>./server/config/sources.json</code>\nfile. The source to add is passed via the <code>req</code>\nobject.\n<br/>\nIf the new source is a file (JSON or CSV),\nthen it would be saved as a json to the directory \n<code>./server/datasets/</code>.\n<br/>\nAn empty array is returned by the <code>res</code> object.",
            "itemtype": "method",
            "name": "putSource",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "PutSource",
            "module": "server",
            "submodule": "RestApi"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: preserve",
            "line": " app/js/canvasjs.js:1"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/DialogCtrl.js:20"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/DialogCtrl.js:290"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/DialogCtrl.js:308"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/LeftNavCtrl.js:69"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/LeftNavCtrl.js:187"
        },
        {
            "message": "Missing item type",
            "line": " app/js/canvasjs.js:1"
        }
    ]
}