{
    "project": {
        "name": "dataexp",
        "description": "An application for exploring and visualizing the timeseries",
        "version": "0.0.1",
        "url": "http://www.maya-technologies.com/en/",
        "themedir": "/usr/local/lib/node_modules/yuidocjs/themes/maya"
    },
    "files": {
        "app/js/controllers/DialogCtrl.js": {
            "name": "app/js/controllers/DialogCtrl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/js/controllers/LeftNavCtrl.js": {
            "name": "app/js/controllers/LeftNavCtrl.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "app/js/canvasjs.js": {
            "name": "app/js/canvasjs.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "server/connectors/FileConnector.js": {
            "name": "server/connectors/FileConnector.js",
            "modules": {
                "Connectors": 1
            },
            "classes": {
                "FileConnector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/connectors/MongoConnector.js": {
            "name": "server/connectors/MongoConnector.js",
            "modules": {},
            "classes": {
                "MongoConnector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/connectors/MysqlConnector.js": {
            "name": "server/connectors/MysqlConnector.js",
            "modules": {},
            "classes": {
                "MysqlConnector": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/GetSources.js": {
            "name": "server/rest/GetSources.js",
            "modules": {
                "RestApi": 1
            },
            "classes": {
                "GetSources": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/rest/GetTimeseries.js": {
            "name": "server/rest/GetTimeseries.js",
            "modules": {},
            "classes": {
                "GetTimseries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "server/routes.js": {
            "name": "server/routes.js",
            "modules": {},
            "classes": {
                "routes": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "server": {
            "name": "server",
            "submodules": {
                "Connectors": 1,
                "RestApi": 1
            },
            "elements": {},
            "classes": {
                "FileConnector": 1,
                "MongoConnector": 1,
                "MysqlConnector": 1,
                "GetSources": 1,
                "GetTimseries": 1,
                "routes": 1
            },
            "fors": {},
            "namespaces": {},
            "file": "server/routes.js",
            "line": 16
        },
        "Connectors": {
            "name": "Connectors",
            "submodules": {},
            "elements": {},
            "classes": {
                "FileConnector": 1,
                "MongoConnector": 1,
                "MysqlConnector": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "server",
            "namespace": "",
            "file": "server/connectors/MysqlConnector.js",
            "line": 9,
            "description": "Connectors to different types of storages."
        },
        "RestApi": {
            "name": "RestApi",
            "submodules": {},
            "elements": {},
            "classes": {
                "GetSources": 1,
                "GetTimseries": 1,
                "routes": 1
            },
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "server",
            "namespace": "",
            "file": "server/routes.js",
            "line": 16,
            "description": "Rest API's offered by server."
        }
    },
    "classes": {
        "FileConnector": {
            "name": "FileConnector",
            "shortname": "FileConnector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "Connectors",
            "namespace": "",
            "file": "server/connectors/FileConnector.js",
            "line": 11,
            "description": "A connector to the files (JSON and CSV)"
        },
        "MongoConnector": {
            "name": "MongoConnector",
            "shortname": "MongoConnector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "Connectors",
            "namespace": "",
            "file": "server/connectors/MongoConnector.js",
            "line": 9,
            "description": "A connector to the MongoDB database"
        },
        "MysqlConnector": {
            "name": "MysqlConnector",
            "shortname": "MysqlConnector",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "Connectors",
            "namespace": "",
            "file": "server/connectors/MysqlConnector.js",
            "line": 9,
            "description": "A connector to the MySQL database"
        },
        "GetSources": {
            "name": "GetSources",
            "shortname": "GetSources",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/GetSources.js",
            "line": 9
        },
        "GetTimseries": {
            "name": "GetTimseries",
            "shortname": "GetTimseries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/rest/GetTimeseries.js",
            "line": 32
        },
        "routes": {
            "name": "routes",
            "shortname": "routes",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "server",
            "submodule": "RestApi",
            "namespace": "",
            "file": "server/routes.js",
            "line": 16,
            "description": "A class (module) that defines all \nthe API URLs, and the related methods.\n<br/>\nHere are some of the URLs: <br/>\n- <b>/api/sources</b>: GET a JSON with sources configuration\n- <b>/api/sources</b>: POST a new source, returns an empty array\n- <b>/api/sources/:source_name</b>: DELETE source, returns an empty array\n- <b>/api/stores</b>: POST a sources config, returns an array of stores\n- <b>/api/fields</b>: POST a stores config, returns an array of fields\n- <b>/api/timeseries</b>: POST a fields config, returns the realted dataset\n- <b>/api/stats</b>: GET statistics from tsproc\n- <b>/api/config</b>: GET configuration JSON of tsproc"
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 4,
            "class": "FileConnector"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 186,
            "class": "FileConnector"
        },
        {
            "file": "app/js/controllers/DialogCtrl.js",
            "line": 193,
            "class": "FileConnector"
        },
        {
            "file": "app/js/controllers/LeftNavCtrl.js",
            "line": 69,
            "class": "FileConnector"
        },
        {
            "file": "app/js/controllers/LeftNavCtrl.js",
            "line": 187,
            "class": "FileConnector"
        },
        {
            "file": "app/js/canvasjs.js",
            "line": 1,
            "preserve": "CanvasJS HTML5 & JavaScript Charts - v1.8.1 GA - http://canvasjs.com/ \nCopyright 2013 fenopix",
            "class": "FileConnector"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 17,
            "description": "A public method that returns the \nname of the store (single one because it's\na file) that are present in the specified by\nconfig file database.",
            "itemtype": "method",
            "name": "getStoreNames",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (file) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (file) configuration",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var source_config = { \n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t} \n    };\n\n    //requesting the stores\n    file_connnector.getStoreNames(source_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[ \n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'test'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test',\n    \t\t//\t\t\ttype: 'json',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'file',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test.json'\n    \t\t//\t\t}\n    \t\t//\t}\n    \t\t//]\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 88,
            "description": "A public method that adds a field 'size'\nto the store (file) configuration\nspecified in <code>store_config</code>.",
            "itemtype": "method",
            "name": "getStoreSize",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (file) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (file) configuration with\nadditional 'size' field",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'test'},\n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t} \n    };\n\n    //requesting the size\n    file_connnector.getStoreSize(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//{ \n    \t\t//\tstore: {name: 'test', size: 4},\n    \t\t//\tsource: { \n    \t\t//\t\tname: 'test',\n    \t\t//\t\ttype: 'json',\n    \t\t//\t\tuser: '',\n    \t\t//\t\tpassw: '',\n    \t\t//\t\tserver: 'file',\n    \t\t//\t\tport: null,\n    \t\t//\t\tdb: 'test.json'\n    \t\t//\t}\n    \t\t//}\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 171,
            "description": "A public method that returns\nthe field names present in each\ndocument.<br/>\nFields are only checked in the \nfirst document of store (file).<br/>\nAlso the value of each field is saved (cf exemple).<br/>",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (file) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of fields configuration",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'test', size: 4}, //presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t} \n    };\n\n    //requesting the fields\n    file_connnector.getFields(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ \n    \t\t//\t\tfield: {name: 'a', value: 18.11},\n    \t\t//\t\tstore: {name: 'test', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test',\n    \t\t//\t\t\ttype: 'json',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'file',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test.json'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{\n    \t\t//\t\tfield: {name: 'year', value: '2011'},\n    \t\t//\t\tstore: {name: 'test', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test',\n    \t\t//\t\t\ttype: 'json',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'file',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test.json'\n    \t\t//\t\t}\n    \t\t//\t}\n         //]\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 290,
            "description": "A public method that takes in the fields configuration file\n(<code>dataset_config</code>) and returns the requested dataset.",
            "itemtype": "method",
            "name": "getDataset",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A requested dataset",
                "type": "Array"
            },
            "example": [
                "\n    var file_connector = require('../connectors/FileConnector');\n\n    //the json file called 'test.json'\n\n    //config file\n    var dataset_config = {\n    \tfields: [\n    \t\t{name: 'year', value: '2011', format: 'YYYY'}, //'value' and 'format' fields are optional\n    \t\t{name: 'a', value: 18.11}\n    \t],\n    \tstore: {name: 'test', size: 4}, //presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test',\n    \t\t\ttype: 'json',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'file',\n    \t\t\tport: null,\n    \t\t\tdb: 'test.json'\n    \t}\n    };\n\n    //requesting the dataset\n    file_connnector.getDataset(dataset_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ a: 18.11, year: '2011' },\n    \t\t//\t{ a: 21.07, year: '2012' },\n    \t\t//\t{ a: 23.23, year: '2013' },\n    \t\t//\t{ a: 24.24, year: '2014' }\n    \t\t//]\n    });\n"
            ],
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 383,
            "description": "A private method that checks\nthe validity of source (file)\nconfiguration",
            "itemtype": "method",
            "name": "isValidSourceConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (file) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 406,
            "description": "A private method that checks\nthe validity of store (file)\nconfiguration",
            "itemtype": "method",
            "name": "isValidStoreConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (file) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/FileConnector.js",
            "line": 429,
            "description": "A private method that checks\nthe validity of store dataset\nconfiguration",
            "itemtype": "method",
            "name": "isValidDatasetConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "FileConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 15,
            "description": "A public method that returns the \nnames of the stores (mongo collections)\nthat are present in the specified by\nconfig file database.",
            "itemtype": "method",
            "name": "getStoreNames",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mongo database) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mongo collections) configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var source_config = { \n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the stores\n    mongo_connnector.getStoreNames(source_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[ \n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'collection1'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'collection2'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n    \t\t//]\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 143,
            "description": "A public method that adds a field 'size'\nto the store (mongo collection) configuration\nspecified in <code>store_config</code>.",
            "itemtype": "method",
            "name": "getStoreSize",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mongo collection) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mongo collections) configuration with\nadditional 'size' field",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'collection1'},\n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the size\n    mongo_connnector.getStoreSize(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//{ \n    \t\t//\tstore: {name: 'collection1', size: 4},\n    \t\t//\tsource: { \n    \t\t//\t\tname: 'test_mongo',\n    \t\t//\t\ttype: 'mongo',\n    \t\t//\t\tuser: '',\n    \t\t//\t\tpassw: '',\n    \t\t//\t\tserver: 'localhost',\n    \t\t//\t\tport: null,\n    \t\t//\t\tdb: 'test_database'\n    \t\t//\t}\n    \t\t//}\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 227,
            "description": "A public method that returns\nthe field names present in each\ndocument.<br/>\nFields are only checked in the \nfirst document of store (mongo collection).<br/>\nAlso the value of each field is saved (cf exemple).<br/>\nThe mongodb '_id' field is ommited.",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mongo collection) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of fields configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'collection1', size: 4}, //presence of 'size' is optional \n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the fields\n    mongo_connnector.getFields(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ \n    \t\t//\t\tfield: {name: 'a', value: 18.11},\n    \t\t//\t\tstore: {name: 'collection1', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{\n    \t\t//\t\tfield: {name: 'year', value: '2011'},\n    \t\t//\t\tstore: {name: 'collection2', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mongo',\n    \t\t//\t\t\ttype: 'mongo',\n    \t\t//\t\t\tuser: '',\n    \t\t//\t\t\tpassw: '',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n         //]\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 369,
            "description": "A public method that takes in the fields configuration file\n(<code>dataset_config</code>) and returns the requested dataset.",
            "itemtype": "method",
            "name": "getDataset",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A requested dataset",
                "type": "Array"
            },
            "example": [
                "\n    var mongo_connector = require('../connectors/MongoConnector');\n\n    //the MongoDB database 'test_database' has the following collections:\n    //\t- collection1\n    //\t- collection2\n\n    //config file\n    var dataset_config = {\n    \tfields: [\n    \t\t{name: 'year', value: '2011', format: 'YYYY'}, //'value' and 'format' fields are optional\n    \t\t{name: 'a', value: 18.11}\n    \t],\n    \tstore: {name: 'collection1', size: 3},\t//presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test_mongo',\n    \t\t\ttype: 'mongo',\n    \t\t\tuser: '',\n    \t\t\tpassw: '',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the dataset\n    mongo_connnector.getDataset(dataset_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ a: 18.11, year: '2011' },\n    \t\t//\t{ a: 21.07, year: '2012' },\n    \t\t//\t{ a: 23.23, year: '2013' },\n    \t\t//\t{ a: 24.24, year: '2014' }\n    \t\t//]\n    });\n"
            ],
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 463,
            "description": "A private method that checks\nthe validity of source (mongo database)\nconfiguration",
            "itemtype": "method",
            "name": "isValidSourceConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mongo database) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 486,
            "description": "A private method that checks\nthe validity of store (mongo collection)\nconfiguration",
            "itemtype": "method",
            "name": "isValidStoreConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mongo collection) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MongoConnector.js",
            "line": 509,
            "description": "A private method that checks\nthe validity of store dataset\nconfiguration",
            "itemtype": "method",
            "name": "isValidDatasetConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MongoConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 15,
            "description": "A public method that returns the \nnames of the stores (mysql tables)\nthat are present in the specified by\nconfig file database.",
            "itemtype": "method",
            "name": "getStoreNames",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mysql database) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mysql tables) configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var source_config = { \n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the stores\n    mysql_connnector.getStoreNames(source_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[ \n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'table1'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{ \n    \t\t//\t\tstore: {name: 'table2'},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n    \t\t//]\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 155,
            "description": "A public method that adds a field 'size'\nto the store (mysql table) configuration\nspecified in <code>store_config</code>.",
            "itemtype": "method",
            "name": "getStoreSize",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mysql table) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of stores (mysql tables) configuration with\nadditional 'size' field",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'table1'},\n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the size\n    mysql_connnector.getStoreSize(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//{ \n    \t\t//\tstore: {name: 'table1', size: 4},\n    \t\t//\tsource: { \n    \t\t//\t\tname: 'test_mysql',\n    \t\t//\t\ttype: 'mysql',\n    \t\t//\t\tuser: 'root',\n    \t\t//\t\tpassw: 'root',\n    \t\t//\t\tserver: 'localhost',\n    \t\t//\t\tport: null,\n    \t\t//\t\tdb: 'test_database'\n    \t\t//\t}\n    \t\t//}\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 260,
            "description": "A public method that returns\nthe column names of the table.<br/>\nAlso the first value of each column is saved (cf exemple).<br/>",
            "itemtype": "method",
            "name": "getFields",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mysql table) configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "An array of fields configuration",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var store_config = {\n    \tstore: {name: 'table1', size: 4}, //presence of 'size' is optional \n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the fields\n    mysql_connnector.getFields(store_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ \n    \t\t//\t\tfield: {name: 'a', value: 18.11},\n    \t\t//\t\tstore: {name: 'table1', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t},\n    \t\t//\t{\n    \t\t//\t\tfield: {name: 'year', value: '2011'},\n    \t\t//\t\tstore: {name: 'table1', size: 4},\n    \t\t//\t\tsource: { \n    \t\t//\t\t\tname: 'test_mysql',\n    \t\t//\t\t\ttype: 'mysql',\n    \t\t//\t\t\tuser: 'root',\n    \t\t//\t\t\tpassw: 'root',\n    \t\t//\t\t\tserver: 'localhost',\n    \t\t//\t\t\tport: null,\n    \t\t//\t\t\tdb: 'test_database'\n    \t\t//\t\t}\n    \t\t//\t}\n         //]\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 406,
            "description": "A public method that takes in the fields configuration file\n(<code>dataset_config</code>) and returns the requested dataset.",
            "itemtype": "method",
            "name": "getDataset",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A requested dataset",
                "type": "Array"
            },
            "example": [
                "\n    var mysql_connector = require('../connectors/MysqlConnector');\n\n    //the MySQL database 'test_database' has the following tables:\n    //\t- table1\n    //\t- table2\n\n    //config file\n    var dataset_config = {\n    \tfields: [\n    \t\t{name: 'year', value: '2011', format: 'YYYY'}, //'value' and 'format' fields are optional\n    \t\t{name: 'a', value: 18.11}\n    \t]\n    \tstore: {name: 'table1', size: 4},\t//presence of 'size' is optional\n    \tsource: {\n    \t\t\tname: 'test_mysql',\n    \t\t\ttype: 'mysql',\n    \t\t\tuser: 'root',\n    \t\t\tpassw: 'root',\n    \t\t\tserver: 'localhost',\n    \t\t\tport: null,\n    \t\t\tdb: 'test_database'\n    \t} \n    };\n\n    //requesting the dataset\n    mysql_connnector.getDataset(dataset_config, function(err, data){\n\t\n    \t\tif (data) console.log(data);\n    \t\t//the result is:\n    \t\t//[\n    \t\t//\t{ a: 18.11, year: '2011' },\n    \t\t//\t{ a: 21.07, year: '2012' },\n    \t\t//\t{ a: 23.23, year: '2013' },\n    \t\t//\t{ a: 24.24, year: '2014' }\n    \t\t//]\n    });\n"
            ],
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 529,
            "description": "A private method that checks\nthe validity of source (mysql database)\nconfiguration",
            "itemtype": "method",
            "name": "isValidSourceConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "source_config",
                    "description": "Source (mysql database) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 552,
            "description": "A private method that checks\nthe validity of store (mysql table)\nconfiguration",
            "itemtype": "method",
            "name": "isValidStoreConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "store_config",
                    "description": "Store (mysql table) configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/connectors/MysqlConnector.js",
            "line": 575,
            "description": "A private method that checks\nthe validity of store dataset\nconfiguration",
            "itemtype": "method",
            "name": "isValidDatasetConfig",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "dataset_config",
                    "description": "Dataset configuration",
                    "type": "Json"
                }
            ],
            "return": {
                "description": "true if config is valid, false if not",
                "type": "Boolean"
            },
            "class": "MysqlConnector",
            "module": "server",
            "submodule": "Connectors"
        },
        {
            "file": "server/rest/GetSources.js",
            "line": 16,
            "description": "A method that returns a JSON file\nwith configuration of sources (ex: MySQL database)\n<br/>\nThe configuration of sources is in the file\n<code>./server/config/sources.json</code>",
            "itemtype": "method",
            "name": "getSources",
            "params": [
                {
                    "name": "req",
                    "description": "Express.js request",
                    "type": "Request"
                },
                {
                    "name": "res",
                    "description": "Express.js response",
                    "type": "Response"
                }
            ],
            "class": "GetSources",
            "module": "server",
            "submodule": "RestApi"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: preserve",
            "line": " app/js/canvasjs.js:1"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/DialogCtrl.js:4"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/DialogCtrl.js:186"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/DialogCtrl.js:193"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/LeftNavCtrl.js:69"
        },
        {
            "message": "Missing item type",
            "line": " app/js/controllers/LeftNavCtrl.js:187"
        },
        {
            "message": "Missing item type",
            "line": " app/js/canvasjs.js:1"
        }
    ]
}